// –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
const apiKeyInput = document.getElementById('apiKeyInput');
const saveApiKeyButton = document.getElementById('saveApiKey');
const apiKeyStatus = document.getElementById('apiKeyStatus');
const voiceButton = document.getElementById('voiceButton');
const voiceStatus = document.getElementById('voiceStatus');
const voiceError = document.getElementById('voiceError');
const chatContainer = document.getElementById('chatContainer');
const mistralBtn = document.getElementById('mistralBtn');
const openaiBtn = document.getElementById('openaiBtn');
const voiceSelect = document.getElementById('voiceSelect');
const rateInput = document.getElementById('rateInput');
const pitchInput = document.getElementById('pitchInput');
const volumeInput = document.getElementById('volumeInput');
const rateValue = document.getElementById('rateValue');
const pitchValue = document.getElementById('pitchValue');
const volumeValue = document.getElementById('volumeValue');
const testVoiceBtn = document.getElementById('testVoiceBtn');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let apiKey = '';
let recognition = null;
let isListening = false;
let currentProvider = 'mistral';
let synth = window.speechSynthesis;
let voices = [];
let voicesLoaded = false;

// ===== –ü–†–û–í–ï–†–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò API =====
function isSpeechSynthesisSupported() {
    return 'speechSynthesis' in window;
}

function isSpeechRecognitionSupported() {
    return ('SpeechRecognition' in window) || ('webkitSpeechRecognition' in window);
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–û–õ–û–°–ê–ú–ò =====
function populateVoiceList() {
    if (!isSpeechSynthesisSupported()) {
        voiceSelect.innerHTML = '<option value="">–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</option>';
        voiceSelect.disabled = true;
        testVoiceBtn.disabled = true;
        return;
    }

    voices = synth.getVoices();
    
    if (voices.length === 0) {
        voiceSelect.innerHTML = '<option value="">–ì–æ–ª–æ—Å–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</option>';
        setTimeout(populateVoiceList, 100);
        return;
    }

    voiceSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å...</option>';
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    const russianVoices = voices.filter(voice => voice.lang.startsWith('ru'));
    const englishVoices = voices.filter(voice => voice.lang.startsWith('en'));
    
    if (russianVoices.length > 0) {
        const optgroup = document.createElement('optgroup');
        optgroup.label = '–†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞';
        russianVoices.forEach(voice => {
            const option = document.createElement('option');
            option.value = voice.name;
            option.textContent = `${voice.name} (${voice.lang})`;
            optgroup.appendChild(option);
        });
        voiceSelect.appendChild(optgroup);
    }
    
    if (englishVoices.length > 0) {
        const optgroup = document.createElement('optgroup');
        optgroup.label = '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞';
        englishVoices.forEach(voice => {
            const option = document.createElement('option');
            option.value = voice.name;
            option.textContent = `${voice.name} (${voice.lang})`;
            optgroup.appendChild(option);
        });
        voiceSelect.appendChild(optgroup);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    loadVoiceSettings();
    voicesLoaded = true;
}

function loadVoiceSettings() {
    try {
        const savedVoice = localStorage.getItem('jarvisVoice');
        const savedRate = localStorage.getItem('jarvisRate') || '1';
        const savedPitch = localStorage.getItem('jarvisPitch') || '1';
        const savedVolume = localStorage.getItem('jarvisVolume') || '1';
        
        if (savedVoice) {
            voiceSelect.value = savedVoice;
        }
        
        rateInput.value = savedRate;
        rateValue.textContent = savedRate;
        
        pitchInput.value = savedPitch;
        pitchValue.textContent = savedPitch;
        
        volumeInput.value = savedVolume;
        volumeValue.textContent = savedVolume;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

function saveVoiceSettings() {
    try {
        localStorage.setItem('jarvisVoice', voiceSelect.value);
        localStorage.setItem('jarvisRate', rateInput.value);
        localStorage.setItem('jarvisPitch', pitchInput.value);
        localStorage.setItem('jarvisVolume', volumeInput.value);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

function speakText(text) {
    if (!isSpeechSynthesisSupported() || !synth) {
        console.warn('–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (synth.speaking) {
        synth.cancel();
    }
    
    try {
        const utterance = new SpeechSynthesisUtterance(text);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
        if (voiceSelect.value) {
            const selectedVoice = voices.find(voice => voice.name === voiceSelect.value);
            if (selectedVoice) {
                utterance.voice = selectedVoice;
                utterance.lang = selectedVoice.lang;
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        utterance.rate = parseFloat(rateInput.value);
        utterance.pitch = parseFloat(pitchInput.value);
        utterance.volume = parseFloat(volumeInput.value);
        
        utterance.onerror = function(event) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', event.error);
        };
        
        synth.speak(utterance);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏:', error);
    }
}

// ===== –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –†–ï–ß–ò =====
function setupSpeechRecognition() {
    if (!isSpeechRecognitionSupported()) {
        return null;
    }
    
    try {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'ru-RU';
        recognition.maxAlternatives = 1;
        
        recognition.onstart = function() {
            isListening = true;
            voiceButton.classList.add('listening');
            voiceStatus.textContent = "üé§ –°–ª—É—à–∞—é...";
            voiceError.textContent = "";
        };
        
        recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            addMessage(transcript, 'user');
            processCommand(transcript);
        };
        
        recognition.onerror = function(event) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', event.error);
            handleRecognitionError(event.error);
        };
        
        recognition.onend = function() {
            isListening = false;
            voiceButton.classList.remove('listening');
            voiceStatus.textContent = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞";
        };
        
        return recognition;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
        return null;
    }
}

function handleRecognitionError(errorCode) {
    let errorMessage = "–û—à–∏–±–∫–∞: ";
    
    switch(errorCode) {
        case 'no-speech':
            errorMessage = "–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            break;
        case 'audio-capture':
            errorMessage = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.";
            break;
        case 'not-allowed':
            errorMessage = "–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.";
            break;
        case 'network':
            errorMessage = "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
            break;
        default:
            errorMessage = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${errorCode}`;
    }
    
    voiceError.textContent = errorMessage;
    isListening = false;
    voiceButton.classList.remove('listening');
    voiceStatus.textContent = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞";
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
mistralBtn.addEventListener('click', () => {
    currentProvider = 'mistral';
    mistralBtn.classList.add('active');
    openaiBtn.classList.remove('active');
    apiKeyInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Mistral API –∫–ª—é—á";
    updateInstructions();
});

openaiBtn.addEventListener('click', () => {
    currentProvider = 'openai';
    openaiBtn.classList.add('active');
    mistralBtn.classList.remove('active');
    apiKeyInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á";
    updateInstructions();
});

function updateInstructions() {
    const instructions = document.querySelector('.instructions');
    if (!instructions) return;
    
    if (currentProvider === 'mistral') {
        instructions.innerHTML = `
            <h3>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Mistral API –∫–ª—é—á:</h3>
            <ol>
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ <a href="https://console.mistral.ai/api-keys/" target="_blank">console.mistral.ai/api-keys</a></li>
                <li>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "Create new key"</li>
                <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –≤—ã—à–µ</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</li>
            </ol>
            <p>Mistral AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!</p>
        `;
    } else {
        instructions.innerHTML = `
            <h3>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å OpenAI API –∫–ª—é—á:</h3>
            <ol>
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ <a href="https://platform.openai.com/api-keys" target="_blank">platform.openai.com/api-keys</a></li>
                <li>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç OpenAI –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "Create new secret key"</li>
                <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –≤—ã—à–µ</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</li>
            </ol>
        `;
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
function initializeApp() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É API
    if (!isSpeechSynthesisSupported()) {
        voiceSelect.innerHTML = '<option value="">–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</option>';
        voiceSelect.disabled = true;
        testVoiceBtn.disabled = true;
        addMessage("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome –∏–ª–∏ Edge.", 'jarvis');
    }
    
    if (!isSpeechRecognitionSupported()) {
        voiceError.textContent = "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome –∏–ª–∏ Edge.";
        voiceButton.style.opacity = "0.5";
        voiceButton.style.cursor = "not-allowed";
        addMessage("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.", 'jarvis');
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    recognition = setupSpeechRecognition();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
        const savedApiKey = localStorage.getItem('jarvisApiKey');
        const savedProvider = localStorage.getItem('aiProvider');
        
        if (savedApiKey) {
            apiKey = savedApiKey;
            apiKeyInput.value = savedApiKey;
            apiKeyStatus.textContent = "API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω";
            apiKeyStatus.style.color = "#4caf50";
            addMessage("API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", 'jarvis');
        }
        
        if (savedProvider) {
            currentProvider = savedProvider;
            if (currentProvider === 'openai') {
                openaiBtn.click();
            } else {
                mistralBtn.click();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞
    populateVoiceList();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ–∑–∂–µ)
    if (isSpeechSynthesisSupported() && synth) {
        synth.onvoiceschanged = populateVoiceList;
    }
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö =====
saveApiKeyButton.addEventListener('click', () => {
    apiKey = apiKeyInput.value.trim();
    if (apiKey) {
        try {
            localStorage.setItem('jarvisApiKey', apiKey);
            localStorage.setItem('aiProvider', currentProvider);
            apiKeyStatus.textContent = "API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω";
            apiKeyStatus.style.color = "#4caf50";
            addMessage(`API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è ${currentProvider === 'mistral' ? 'Mistral AI' : 'OpenAI'}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.`, 'jarvis');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞:', error);
            apiKeyStatus.textContent = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è";
            apiKeyStatus.style.color = "#f44336";
        }
    } else {
        apiKeyStatus.textContent = "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á";
        apiKeyStatus.style.color = "#f44336";
    }
});

voiceButton.addEventListener('click', () => {
    if (!apiKey) {
        addMessage("–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à API –∫–ª—é—á.", 'jarvis');
        return;
    }
    
    if (!recognition) {
        addMessage("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.", 'jarvis');
        return;
    }
    
    if (isListening) {
        recognition.stop();
    } else {
        try {
            recognition.start();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
            voiceError.textContent = "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É";
            addMessage("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.", 'jarvis');
        }
    }
});

testVoiceBtn.addEventListener('click', () => {
    if (!isSpeechSynthesisSupported()) {
        addMessage("–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.", 'jarvis');
        return;
    }
    
    if (!voicesLoaded || voices.length === 0) {
        addMessage("–ì–æ–ª–æ—Å–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", 'jarvis');
        return;
    }
    
    if (!voiceSelect.value) {
        addMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", 'jarvis');
        return;
    }
    
    speakText("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Å—ç—Ä. –Ø –î–∂–∞—Ä–≤–∏—Å, –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
rateInput.addEventListener('input', () => {
    rateValue.textContent = rateInput.value;
    saveVoiceSettings();
});

pitchInput.addEventListener('input', () => {
    pitchValue.textContent = pitchInput.value;
    saveVoiceSettings();
});

volumeInput.addEventListener('input', () => {
    volumeValue.textContent = volumeInput.value;
    saveVoiceSettings();
});

voiceSelect.addEventListener('change', saveVoiceSettings);

// ===== –§–£–ù–ö–¶–ò–ò –ß–ê–¢–ê =====
function addMessage(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message');
    messageDiv.classList.add(sender === 'user' ? 'user-message' : 'jarvis-message');
    
    const messageText = document.createElement('div');
    messageText.classList.add('message-text');
    messageText.textContent = text;
    
    messageDiv.appendChild(messageText);
    chatContainer.appendChild(messageDiv);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    chatContainer.scrollTop = chatContainer.scrollHeight;
    
    // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã JARVIS
    if (sender === 'jarvis' && isSpeechSynthesisSupported() && voicesLoaded) {
        speakText(text);
    }
}

// ===== API –§–£–ù–ö–¶–ò–ò =====
async function askMistralAI(message) {
    try {
        const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                model: 'mistral-small-latest',
                messages: [
                    {
                        role: 'system',
                        content: '–¢—ã JARVIS - –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π Marvel. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¢–æ–Ω–∏ –°—Ç–∞—Ä–∫–∞. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
                    },
                    {
                        role: 'user',
                        content: message
                    }
                ],
                max_tokens: 500,
                temperature: 0.7
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} - ${errorData.error?.message || response.statusText}`);
        }
        
        const data = await response.json();
        return data.choices[0].message.content;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Mistral AI:', error);
        throw error;
    }
}

async function askOpenAI(message) {
    try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                model: 'gpt-3.5-turbo',
                messages: [
                    {
                        role: 'system',
                        content: '–¢—ã JARVIS - –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π Marvel. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¢–æ–Ω–∏ –°—Ç–∞—Ä–∫–∞. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
                    },
                    {
                        role: 'user',
                        content: message
                    }
                ],
                max_tokens: 500,
                temperature: 0.7
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} - ${errorData.error?.message || response.statusText}`);
        }
        
        const data = await response.json();
        return data.choices[0].message.content;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:', error);
        throw error;
    }
}

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î =====
async function processCommand(command) {
    const lowerCommand = command.toLowerCase();
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (lowerCommand.includes('–ø—Ä–∏–≤–µ—Ç') || lowerCommand.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
        const response = "–ü—Ä–∏–≤–µ—Ç, —Å—ç—Ä. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?";
        addMessage(response, 'jarvis');
        return;
    }
    else if (lowerCommand.includes('–≤—Ä–µ–º—è')) {
        const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        const response = `–°–µ–π—á–∞—Å ${time}`;
        addMessage(response, 'jarvis');
        return;
    }
    else if (lowerCommand.includes('–¥–∞—Ç–∞')) {
        const date = new Date().toLocaleDateString('ru-RU', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
        const response = `–°–µ–≥–æ–¥–Ω—è ${date}`;
        addMessage(response, 'jarvis');
        return;
    }
    else if (lowerCommand.includes('–æ—Ç–∫—Ä–æ–π google')) {
        window.open("https://google.com", "_blank");
        const response = "–û—Ç–∫—Ä—ã–≤–∞—é Google";
        addMessage(response, 'jarvis');
        return;
    }
    else if (lowerCommand.includes('–æ—Ç–∫—Ä–æ–π —á–∞—Ç')) {
        window.open("https://chat.openai.com", "_blank");
        const response = "–û—Ç–∫—Ä—ã–≤–∞—é ChatGPT";
        addMessage(response, 'jarvis');
        return;
    }
    else if (lowerCommand.includes('–≤–∏–∫–∏–ø–µ–¥–∏—è')) {
        const query = command.replace('–≤–∏–∫–∏–ø–µ–¥–∏—è', '').trim();
        if (query) {
            window.open(`https://ru.wikipedia.org/wiki/${encodeURIComponent(query)}`, "_blank");
            const response = `–ò—â—É "${query}" –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏`;
            addMessage(response, 'jarvis');
        } else {
            const response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏—Å–∫–∞—Ç—å –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏";
            addMessage(response, 'jarvis');
        }
        return;
    }
    
    // –ó–∞–ø—Ä–æ—Å –∫ AI
    addMessage("–î—É–º–∞—é...", 'jarvis');
    
    try {
        let response;
        if (currentProvider === 'mistral') {
            response = await askMistralAI(command);
        } else {
            response = await askOpenAI(command);
        }
        
        addMessage(response, 'jarvis');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI:', error);
        
        let errorMessage = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ";
        if (error.message.includes('401')) {
            errorMessage += "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á.";
        } else if (error.message.includes('429')) {
            errorMessage += "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        } else if (error.message.includes('network')) {
            errorMessage += "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
        } else {
            errorMessage += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.";
        }
        
        addMessage(errorMessage, 'jarvis');
    }
}

// ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    setTimeout(initializeApp, 100);
});

// –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ DOMContentLoaded –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    setTimeout(initializeApp, 500);
}
